限制异常的方法：
1、声明一个函数时不带任何异常描述时，表示函数可以抛出任何异常：
	int f(int, char);

2、声明一个函数带特定异常类型时，表示可以抛出指定类型的异常:
	int f(int, char) throw(int, char); //表示可以抛出int和char类型的异常
	
3、声明一个函数带throw，但是没有任何类型的空表时，表示不能抛出任何异常：
	int f(int, char) throw(); //任何异常都不允许抛出
	
捕获所有异常：
多数情况下，catch只能用于捕获特定类型的异常，但是它也有捕获全部异常的能力。
catch(...){
	...
}

再次抛出异常：
	如果catch块无法处理捕获的异常，它可以再次进行异常抛出，使得异常可以在恰当的
地方得到处理。再次抛出的异常不会再被同一个catch块捕获，他将传递给外部的catch块
进行处理；
	要在catch块中再次抛出同一异常，只需要在该catch块中添加不带任何参数的throw语句
	
异常捕获的try catch可以嵌套：
可以形成一个异常处理的调用链

父类可以顶替子类异常被捕获到
子类不可以顶替父类异常被捕获

可以通过虚函数的方式实现多态异常抛出，动态实现